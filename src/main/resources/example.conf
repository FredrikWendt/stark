server {
  # List of bindings
  # A binding needs a interface IP to bind to and a TCP port.
  bindings = [
    {
      # HTTP binding

      # Interface to bind to.
      # If not set the value of server.interface is used.
      interface = "0.0.0.0"

      # Port to listen on.
      port = 80
    },
    {
      # HTTPS binding

      # Interface to bind to.
      # If not set the value of server.interface is used.
      interface = "0.0.0.0"

      # Port to listen on.
      port = 443

      # If set SSL encryption will be enabled for this binding. It is not set by default, i.e. only HTTP.
      # The keys cert-file and private-key-file must be set.
      ssl = {
        # Certification file.
        # X.509 certificate.
        cert-file = "domain.crt"

        # Private key file to the certificate in the cert-file key.
        # Should be on DER format.
        private-key-file = "domain.key"
      }
    }
  ]
}

api {
  # Location (domain and path) to the API.
  site-location = "sub.example.com/api"

  # Proxies API is disabled by default, lets enable it so we can add some proxies.
  proxies = on
}

auth {
  # Callback URL for OAuth
  callback-url = "http://login.example.com/callback"

  # URL used to check if the auth cookie exists.
  check-url = "http://login.example.com/check"

  # Path that will be used to set cookie on domains
  set-cookie-path = "/stark-proxy/set-cookie"

  # Regexp that should match email addresses that should be authorized, if left out all authentications are authorized.
  # Don't forget consider if you need to set start of line (^) and/or end of line ($) anchors.
  authorized-email-pattern = "@example.com$"
}

auth.google {
  # Client id
  client-id = "xyz"

  # Client secret
  client-secret = "xyz"
}

# Persistence with Redis
redis {
  # Host of the Redis server
  host = "localhost"

  # Port that the Redis server runs on
  port = 6379

  # Optional password
  password = "secret"

  # Optional identifier for the database number
  db = 1
}
